x = c(x1,x2,x3,x4)
y = c(y1,y2,y3,y4)
df5 = data.frame(x,y, letter="M")
####  E2  ####
df6 = df4 %>% mutate(x = x-1.5, y = y-4, letter="E2")
#### JOIN ####
df = rbind(df1,df2,df3,df4,df5,df6)
# FITST PLOT
ggplot(df, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE)
### Generate Noise
tin = c(.6,.4,.3,.2,.1)
data = lapply(1:5, function(t){
a=rnorm(309,sd=tin[t])
b=(rnorm(309,sd=tin[t]))
df = df %>% mutate(x=x+a, y = y+b, space=t)
})
df = df %>% mutate(space = 6)
df_final= do.call(rbind, data)
df_final = rbind(df_final,df)
## PLOT
ggplot(df_final, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE) + facet_grid(. ~space)
## PLOT ANIMATED
p = ggplot(df_final, aes(x=x,y=y, frame=space)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE)
gganimate(p)
gganimate(p)
install.ffmpeg()
p = ggplot(df_final, aes(x=x,y=y, frame=space)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE)
gganimate(p)
install.packages("installr")
install.ImageMagick()
library(ggplot2)
library(dplyr)
library(gganimate)
####  H  ####
# |
x1 = rep(2,20)
y1 = seq(from =5,to= 7 ,length.out=20)
# _
x2= seq(from =2,to= 3 ,length.out=10)
y2= rep(6,10)
x3 = rep(3,20)
y3 = seq(from =5,to= 7 ,length.out=20)
x = c(x1,x2,x3)
y = c(y1,y2,y3)
df1 = data.frame(x,y,letter="H")
####  I  ####
x1 = rep(4.5,20)
y1 = seq(from =5,to= 7 ,length.out=20)
x2= seq(from =4,to= 5 ,length.out=10)
y2= rep(5,10)
x3= seq(from =4,to= 5 ,length.out=10)
y3= rep(7,10)
x = c(x1,x2,x3)
y = c(y1,y2,y3)
df2 = data.frame(x,y, letter="I")
####  R  ####
# |
x1 = rep(6,20)
y1 = seq(from =5,to= 7 ,length.out=20)
x4 = rep(7,10)
y4 = seq(from =6,to= 7 ,length.out=10)
# -
x2= seq(from = 6,to= 7 ,length.out=10)
y2= rep(6,10)
# -
x3= seq(from = 6,to= 7 ,length.out=10)
y3= rep(7,10)
# /
x5= seq(from = 6,to= 7 ,length.out=13)
y5= seq(from = 6,to= 5 ,length.out=13)
x = c(x1,x2,x3,x4,x5)
y = c(y1,y2,y3,y4,y5)
df3 = data.frame(x,y, letter="R")
####  E  ####
# |
x1 = rep(8,20)
y1 = seq(from =5,to= 7 ,length.out=20)
# --
x2= seq(from = 8,to= 9 ,length.out=10)
y2= rep(7,10)
x3= seq(from = 8,to= 9 ,length.out=10)
y3= rep(5,10)
# -
x4= seq(from = 8,to= 8.5 ,length.out=5)
y4= rep(6,5)
x = c(x1,x2,x3,x4)
y = c(y1,y2,y3,y4)
df4 = data.frame(x,y, letter="E")
####  M  ####
# |
x1 = rep(3.5,20)
y1 = seq(from =1,to= 3 ,length.out=20)
x2 = rep(5.5,20)
y2 = seq(from =1,to= 3 ,length.out=20)
# /
x3= seq(from = 3.5,to= 4.5 ,length.out=13)
y3= seq(from = 3,to= 2 ,length.out=13)
x4= seq(from = 4.5,to= 5.5 ,length.out=13)
y4= seq(from = 2,to= 3 ,length.out=13)
x = c(x1,x2,x3,x4)
y = c(y1,y2,y3,y4)
df5 = data.frame(x,y, letter="M")
####  E2  ####
df6 = df4 %>% mutate(x = x-1.5, y = y-4, letter="E2")
#### JOIN ####
df = rbind(df1,df2,df3,df4,df5,df6)
# FITST PLOT
ggplot(df, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE)
### Generate Noise
tin = c(.6,.4,.3,.2,.1)
data = lapply(1:5, function(t){
a=rnorm(309,sd=tin[t])
b=(rnorm(309,sd=tin[t]))
df = df %>% mutate(x=x+a, y = y+b, space=t)
})
df = df %>% mutate(space = 6)
df_final= do.call(rbind, data)
df_final = rbind(df_final,df)
## PLOT
ggplot(df_final, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE) + facet_grid(. ~space)
p = ggplot(df_final, aes(x=x,y=y, frame=space)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE)
gganimate(p)
ggplot(df_final, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE) + facet_grid(. ~space)
setwd("/Users/saulgarcia/Dropbox/MOOCS/Business Analytics Specialization/Intro_Strategic_Business_Analysis/W3/Quiz")
setwd("/Users/saulgarcia/Dropbox/MOOCS/Strategic-Business-Analytics/01_Intro_Strategic_Business_Analysis/W3/Quiz")
list.files()
setwd("/Users/saulgarcia/Dropbox/MOOCS/Strategic-Business-Analytics/01_Intro_Strategic_Business_Analysis/W3/Quiz")
list.files()
data=read.table('../Data/DATA_3.02_HR2.csv',sep=',',header=TRUE)
train= read.table('../Data/DATA_3.02_HR2.csv',sep=',',header=TRUE)
test = read.table('../Data/DATA_4.02_HR3.csv', sep=',', header = TRUE)
dim(train)
dim(test)
linreg=lm(Rating ~ .,data=train)
train= read.table('../Data/DATA_3.02_HR2.csv',sep=',',header=TRUE)
test = read.table('../Data/DATA_4.02_HR3.csv', sep=',', header = TRUE)
linreg=lm(Rating ~ .,data=train)
names(train)
logreg = glm(left ~ ., family=binomial(logit), data = train)
predattrition = data.frame(probaToLeave)
probaToLeave = predict(logreg, newdata=test ,type="response")
predattrition = data.frame(probaToLeave)
View(predattrition)
head(train)
which.min(predattrition)
predattrition
which.min(data.frame(predattrition))
which.min(c(predattrition))
min(predattrition)
predattrition= data.frame(probaToLeave)
predattrition$performance=datanew$LPE
predattrition$performance=test$LPE
predattrition
predattrition
which.min(predattrition[,1])
names(predattrition)
predattrition %>% filter(performance>= .9)
predattrition %>% filter(performance>= .9) %>% arrange(desc(probaToLeave))
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave)
predattrition %>% add_rownames(df, "VALUE")
head(predattrition)
predattrition %>% mutate(ID = 1:nrow(predattrition))
predattrition = predattrition %>% mutate(ID = 1:nrow(predattrition))
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave)
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave) %>% first()
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave) %>% top_n(1)
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave) %>% top_n()
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave) %>% top_n()
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave) %>% top_n(2)
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave)
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave) %>% top_n(2)
predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave)
train= read.table('../DATA_4.03_MNT.csv',sep=',',header=TRUE)
read.table('../DATA_4.03_MNT.csv',sep=',',header=TRUE)
setwd("/Users/saulgarcia/Dropbox/MOOCS/Strategic-Business-Analytics/01_Intro_Strategic_Business_Analysis/W3/Quiz")
train= read.table('../DATA_4.03_MNT.csv',sep=',',header=TRUE)
train = read.table('../Data/DATA_4.03_MNT.csv',sep=',',header=TRUE)
linregmodel = lm(lifetime~.-broken,data=data)
linregmodel = lm(lifetime~.-broken,data=train)
summary(train)
summary(linregmodel)
install.packages("survival") # Install the survival package to your computer
install.packages("survival") # Install the survival package to your computer
install.packages("survival") # Install the su
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data) # Create your survival regression model
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=train) # Create your survival regression model
summary(survreg)
dependantvars = Surv(data$lifetime, data$broken)
dependantvars = Surv(train$lifetime, train$broken)
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=train) # Create your survival regression model
library(survival) # Load the survival package
dependantvars = Surv(train$lifetime, train$broken)
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=train) # Create your survival regression model
summary(survreg)
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd, dist="gaussian",data=train) # Create your survival regression model
summary(survreg)
Ebreak=predict(survreg, newdata=train, type="quantile", p=.5)
Ebreak
Forecast=data.frame(Ebreak)
head(Forecast)
Forecast$lifetime = train$lifetime
Forecast$broken=train$broken
head(train)
head(Forecast)
Forecast %>% mutate(RemainingLT = Ebreak - lifetime)
Forecast = Forecast %>% mutate(RemainingLT = Ebreak - lifetime)
Forecast=data.frame(Ebreak)
# Lifetime
Forecast$lifetime = train$lifetime
# Is piece broken?
Forecast$broken=train$broken
Forecast = Forecast %>% mutate(RemainingLT = Ebreak - lifetime, index = 1:nrow(Forecast))
head(Forecast)
Forecast %>% select(broken== 0)
Forecast %>% filter(broken== 0)
Forecast %>% filter(broken== 0) %>% arrange(desc(RemainingLT))
(df = Forecast %>% filter(broken== 0) %>% arrange(desc(RemainingLT)))
head(df)
pander(head(df))
kable(head(df))
library(knitr)
df[1,5]
head(predattrition)
predattrition = predattrition %>% mutate(ID = 1:nrow(predattrition))
res = predattrition %>% filter(performance>= .9) %>% arrange(probaToLeave)
head(res)
res = predattrition %>% filter(performance> .9) %>% arrange(probaToLeave)
head(res)
res[1,3]
Ebreak=predict(survreg, newdata=train, type="quantile", p=.5)
# Data Frame
Forecast=data.frame(Ebreak)
# Lifetime
Forecast$lifetime = train$lifetime
# Is piece broken?
Forecast$broken=train$broken
Forecast %>% mutate(RemainingLT = Ebreak - lifetime) %>% filter(broken ==0)
Forecast = Forecast %>% mutate(index = 1:nrow(Forecast))
df = Forecast %>% arrange(desc(RemainingLT))
Forecast
Ebreak=predict(survreg, newdata=train, type="quantile", p=.5)
# Data Frame
Forecast=data.frame(Ebreak)
# Lifetime
Forecast$lifetime = train$lifetime
# Is piece broken?
Forecast$broken=train$broken
Forecast = Forecast %>% mutate(RemainingLT = Ebreak - lifetime) %>% filter(broken ==0)
Forecast = Forecast %>% mutate(index = 1:nrow(Forecast))
Forecast
names(Forecast)
df = Forecast %>% arrange(desc(RemainingLT))
kable(head(df))
install.packages("plotly")
library(plotly)
plot_ly(z = ~volcano)
head(volcano)
dim(volcano)
data(gapminder, package = "gapminder")
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
gapminder
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent))
ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(aes(size = pop, frame = year, ids = country))
names(gapminder)
ggplotly(gg)
ggplot(df, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE)
x1 = rep(2,20)
y1 = seq(from =5,to= 7 ,length.out=20)
# _
x2= seq(from =2,to= 3 ,length.out=10)
y2= rep(6,10)
x3 = rep(3,20)
y3 = seq(from =5,to= 7 ,length.out=20)
x = c(x1,x2,x3)
y = c(y1,y2,y3)
df1 = data.frame(x,y,letter="H")
####  I  ####
x1 = rep(4.5,20)
y1 = seq(from =5,to= 7 ,length.out=20)
x2= seq(from =4,to= 5 ,length.out=10)
y2= rep(5,10)
x3= seq(from =4,to= 5 ,length.out=10)
y3= rep(7,10)
x = c(x1,x2,x3)
y = c(y1,y2,y3)
df2 = data.frame(x,y, letter="I")
####  R  ####
# |
x1 = rep(6,20)
y1 = seq(from =5,to= 7 ,length.out=20)
x4 = rep(7,10)
y4 = seq(from =6,to= 7 ,length.out=10)
# -
x2= seq(from = 6,to= 7 ,length.out=10)
y2= rep(6,10)
# -
x3= seq(from = 6,to= 7 ,length.out=10)
y3= rep(7,10)
# /
x5= seq(from = 6,to= 7 ,length.out=13)
y5= seq(from = 6,to= 5 ,length.out=13)
x = c(x1,x2,x3,x4,x5)
y = c(y1,y2,y3,y4,y5)
df3 = data.frame(x,y, letter="R")
####  E  ####
# |
x1 = rep(8,20)
y1 = seq(from =5,to= 7 ,length.out=20)
# --
x2= seq(from = 8,to= 9 ,length.out=10)
y2= rep(7,10)
x3= seq(from = 8,to= 9 ,length.out=10)
y3= rep(5,10)
# -
x4= seq(from = 8,to= 8.5 ,length.out=5)
y4= rep(6,5)
x = c(x1,x2,x3,x4)
y = c(y1,y2,y3,y4)
df4 = data.frame(x,y, letter="E")
####  M  ####
# |
x1 = rep(3.5,20)
y1 = seq(from =1,to= 3 ,length.out=20)
x2 = rep(5.5,20)
y2 = seq(from =1,to= 3 ,length.out=20)
# /
x3= seq(from = 3.5,to= 4.5 ,length.out=13)
y3= seq(from = 3,to= 2 ,length.out=13)
x4= seq(from = 4.5,to= 5.5 ,length.out=13)
y4= seq(from = 2,to= 3 ,length.out=13)
x = c(x1,x2,x3,x4)
y = c(y1,y2,y3,y4)
df5 = data.frame(x,y, letter="M")
####  E2  ####
df6 = df4 %>% mutate(x = x-1.5, y = y-4, letter="E2")
#### JOIN ####
df = rbind(df1,df2,df3,df4,df5,df6)
ggplot(df, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE)
ggplot(df, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE)
tin = c(.6,.4,.3,.2,.1)
data = lapply(1:5, function(t){
a=rnorm(309,sd=tin[t])
b=(rnorm(309,sd=tin[t]))
df = df %>% mutate(x=x+a, y = y+b, space=t)
})
df = df %>% mutate(space = 6)
df_final= do.call(rbind, data)
df_final = rbind(df_final,df)
ggplot(df_final, aes(x=x,y=y)) + geom_point(aes(col=letter)) +
scale_x_continuous(limits = c(0, 10)) +
scale_y_continuous(limits = c(0, 10)) +
theme_classic() + guides(col=FALSE) + facet_grid(. ~space)
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent, frame = year)) + geom_point(aes(size = pop, ids = country)) +
scale_x_log10()
ggplotly(gg)
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent, frame = year, ids = country)) + geom_point(aes(size = pop)) +
scale_x_log10()
ggplotly(gg)
train = read.table('../Data/DATA_4.03_MNT.csv',sep=',',header=TRUE)
linregmodel = lm(lifetime~.-broken,data=train)
summary(linregmodel)
dependantvars = Surv(train$lifetime, train$broken)
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=train)
summary(survreg)
names(summary(survreg))
summary(survreg)$df
summary(survreg)$call
summary(survreg)$coefficients
summary(survreg)$coefficients <.01
summary(survreg)$coefficients <.05
summary(survreg)$coefficients <.01
r
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd, dist="gaussian",data=train) #
summary(survreg)
Ebreak=predict(survreg, newdata=train, type="quantile", p=.5)
Forecast=data.frame(Ebreak)
Forecast$lifetime = train$lifetime
Forecast
Forecast$broken=train$broken
head(Forecast)
Ebreak=predict(survreg, newdata=train, type="quantile", p=.5)
# Data Frame
Forecast=data.frame(Ebreak)
# Lifetime
Forecast$lifetime = train$lifetime
# Is piece broken?
Forecast$broken=train$broken
Forecast = Forecast %>% mutate(RemainingLT = Ebreak - lifetime) %>% filter(broken ==0)
Forecast = Forecast %>% mutate(index = 1:nrow(Forecast))
# Largest Expected remaining Life
df = Forecast %>% arrange(desc(RemainingLT))
kable(head(df))
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=train) # Create your survival regression model
Ebreak=predict(survreg, newdata=train, type="quantile", p=.5)
# Data Frame
Forecast=data.frame(Ebreak)
# Lifetime
Forecast$lifetime = train$lifetime
# Is piece broken?
Forecast$broken=train$broken
Forecast = Forecast %>% mutate(RemainingLT = Ebreak - lifetime) %>% filter(broken ==0)
Forecast = Forecast %>% mutate(index = 1:nrow(Forecast))
# Largest Expected remaining Life
df = Forecast %>% arrange(desc(RemainingLT))
kable(head(df))
# Read Data
train= read.table('../Data/DATA_3.02_HR2.csv',sep=',',header=TRUE)
test = read.table('../Data/DATA_4.02_HR3.csv', sep=',', header = TRUE)
# GLM of Rating as a function of everything else.
logreg = glm(left ~ ., family=binomial(logit), data = train)
probaToLeave = predict(logreg, newdata=test ,type="response")
# Make it DF
predattrition= data.frame(probaToLeave)
# Append Performance
predattrition$performance=test$LPE
# Less likely to leave
which.min(predattrition[,1])
predattrition
res[1,3]
# Read Data
train = read.table('../Data/DATA_4.03_MNT.csv',sep=',',header=TRUE)
# MLR
linregmodel = lm(lifetime~.-broken,data=train)
summary(linregmodel)
library(survival) # Load the survival package
# Dependant variables
dependantvars = Surv(train$lifetime, train$broken)
# survival regression model
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=train)
summary(survreg)
summary(survreg)$coefficients <.01
summary(survreg)$coefficients <.001
summary(survreg)$coefficients
?options
options(scipen=999)
summary(survreg)$coefficients
summary(survreg)
abs(summary(survreg)$coefficients) <.001
abs(summary(survreg)$coefficients) <.01
summary(survreg)
summary(survreg)$coefficients
names(summary(survreg))
names(summary(survreg))$var
summary(survreg)$var
names(summary(survreg))
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=train) # Create your survival regression model
Ebreak=predict(survreg, newdata=train, type="quantile", p=.5)
Forecast=data.frame(Ebreak)
head(Forecast)
Forecast$lifetime = train$lifetime
head(Forecast)
Forecast$broken=train$broken
head(Forecast)
Forecast = Forecast %>% mutate(RemainingLT = Ebreak - lifetime) %>% filter(broken ==0)
Forecast
head(Forecast)
Forecast = Forecast %>% mutate(index = 1:nrow(Forecast))
head(Forecast)
df = Forecast %>% arrange(desc(RemainingLT))
kable(head(df))
Ebreak=predict(survreg, newdata=train, type="quantile", p=.5)
# Data Frame
Forecast=data.frame(Ebreak)
# Lifetime
Forecast$lifetime = train$lifetime
# Is piece broken?
Forecast$broken=train$broken
Forecast = Forecast %>% mutate(RemainingLT = Ebreak - lifetime) %>%  mutate(index2 = 1:nrow(Forecast)) %>%filter(broken ==0)
Forecast = Forecast %>% mutate(index = 1:nrow(Forecast))
# Largest Expected remaining Life
df = Forecast %>% arrange(desc(RemainingLT))
kable(head(df))
which.min(predattrition[,1])
knit_with_parameters('~/Dropbox/MOOCS/Strategic-Business-Analytics/01_Intro_Strategic_Business_Analysis/W3/Quiz/ISBA-Q5.Rmd')
